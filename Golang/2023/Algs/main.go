package main

// помимо шаблонизатора подключаем os, который предоставляет независимый от платформы интерфейс для взаимодействия с операционной системой. В нашем случае он по понадобиться для вывода результата выполнения шаблона в консоль

import (
	"os"
	"text/template"
)

// определяем структуру, данные которой будут подставляться в шаблон

type Person struct {
	Name string
	Age  int
}

func main() {
	some_person := Person{"Alex", 32}                                     // экземпляр ранее определенной структуры
	some_template := "This is {{ .Name }} and he is {{ .Age }} years old" // текстовое содержимое самого шаблона с проставленными внутри действиями (actions), заключенными в фигурные скобки

	// создаем новый шаблон и парсим его содержимое, тем самым подготавливая его к дальнейшему использованию
	ready_template, err := template.New("test").Parse(some_template)

	// проверяем на наличие ошибок (nil означает ничего, как null в C)
	if err != nil {
		panic(err) // останавливаем выполнение и выводим содержимое ошибки
	}

	// выполняем шаблон и выводим его в консоль приложения
	err = ready_template.Execute(os.Stdout, some_person) // ВЫВОД: This is Alex and he is 32 years old

	// снова проверяем на наличие ошибок
	if err != nil {
		panic(err) // останавливаем выполнение и выводим содержимое ошибки
	}
}
